server:
  port: 8080
spring:
  application:
    name: demo-service
  datasource:
    url: jdbc:mysql://localhost/test?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=2000
      # 配置监控服务器
      stat-view-servlet:
        login-username: admin
        login-password: admin
        reset-enable: false
        url-pattern: /druid/*
        # 添加IP白名单
        #allow:
        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
        #deny:
      web-stat-filter:
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
  #liqubase是否开启
  liquibase:
    enabled: true
    changeLog: "classpath:/db/changelog/db.changelog-master.xml"
    checkChangeLogLocation: true
    #用于跟踪更改历史记录的表的名称。
    databaseChangeLogTable: DATABASECHANGELOG
    #用于跟踪Liquibase并发使用情况的表的名称。
    databaseChangeLogLockTable: DATABASECHANGELOGLOCK
    #是否先清空数据库
    dropFirst: false
    #是否应该在执行更新之前测试回滚。
    testRollbackOnUpdate: true
mybatis-plus:
  mapper-locations: classpath*:/mapper/**Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
#  global-config:
#    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
#    id-type: 2
#    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
#    field-strategy: 2
#    #驼峰下划线转换
#    db-column-underline: true
#    #刷新mapper 调试神器
#    refresh-mapper: true
#    #数据库大写下划线转换
#    #capital-mode: true
#    #序列接口实现类配置
#    #key-generator: com.baomidou.springboot.xxx
#    #逻辑删除配置（下面3个配置）
#    logic-delete-value: 0
#    logic-not-delete-value: 1
    #自定义SQL注入器
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
     # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
eureka:
  instance:
    status-page-url: http://localhost:8002/${spring.application.name}/swagger-ui.html
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 15
    lease-renewal-interval-in-seconds: 5
  client:
    registry-fetch-interval-seconds: 5
    serviceUrl:
      defaultZone: http://localhost:8000/eureka/
dinghuang:
  swagger:
    enabled: true
  exception-intercept:
    enabled: true
  security:
    oauth2:
      enabled: true
      oauthPath:  http://localhost:8002/oauth-service/oauth/
      clients[0]:
        clientId: client1
        clientSecret: client1
        redirectUrl:  http://localhost:8002/oauth-service/index
        scopes: all
        accessTokenValiditySeconds: 6000
        refreshTokenValiditySeconds: 6000
#security:
#  oauth2:
#    client:
#      accessTokenUri: http://localhost:8002/oauth-service/oauth/token
#      user-authorization-uri: http://localhost:8002/oauth-service/authorize
#      client-id: client1
#      client-secret: client1
#    resource:
#      user-info-uri: http://localhost:8002/oauth-service/user
#      prefer-token-info: false
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 100000